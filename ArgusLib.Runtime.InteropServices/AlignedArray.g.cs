#region Copyright and License
/*
This file is part of ArgusLib.Runtime.InteropServices
Copyright (C) 2017 Tobias Meyer
License: Microsoft Reciprocal License (MS-RL)
*/
#endregion

// AUTOGENERATED
// DO NOT MODIFY
namespace ArgusLib.Runtime.InteropServices
{
	using System;
	using System.Numerics;

	public class AlignedArrayByte : AlignedArray<Byte>
	{
		public AlignedArrayByte(byte[] buffer, int alignment, params int[] lengths)
			: base(buffer, alignment, lengths) { }

		public AlignedArrayByte(int alignment, params int[] lengths)
			: base(alignment, lengths) { }

		protected unsafe override Byte GetCore(IntPtr ptr) => *((Byte*)ptr.ToPointer());
		protected unsafe override void SetCore(Byte value, IntPtr ptr) => *((Byte*)ptr.ToPointer()) = value;
	}

	public class AlignedArraySByte : AlignedArray<SByte>
	{
		public AlignedArraySByte(byte[] buffer, int alignment, params int[] lengths)
			: base(buffer, alignment, lengths) { }

		public AlignedArraySByte(int alignment, params int[] lengths)
			: base(alignment, lengths) { }

		protected unsafe override SByte GetCore(IntPtr ptr) => *((SByte*)ptr.ToPointer());
		protected unsafe override void SetCore(SByte value, IntPtr ptr) => *((SByte*)ptr.ToPointer()) = value;
	}

	public class AlignedArrayInt16 : AlignedArray<Int16>
	{
		public AlignedArrayInt16(byte[] buffer, int alignment, params int[] lengths)
			: base(buffer, alignment, lengths) { }

		public AlignedArrayInt16(int alignment, params int[] lengths)
			: base(alignment, lengths) { }

		protected unsafe override Int16 GetCore(IntPtr ptr) => *((Int16*)ptr.ToPointer());
		protected unsafe override void SetCore(Int16 value, IntPtr ptr) => *((Int16*)ptr.ToPointer()) = value;
	}

	public class AlignedArrayUInt16 : AlignedArray<UInt16>
	{
		public AlignedArrayUInt16(byte[] buffer, int alignment, params int[] lengths)
			: base(buffer, alignment, lengths) { }

		public AlignedArrayUInt16(int alignment, params int[] lengths)
			: base(alignment, lengths) { }

		protected unsafe override UInt16 GetCore(IntPtr ptr) => *((UInt16*)ptr.ToPointer());
		protected unsafe override void SetCore(UInt16 value, IntPtr ptr) => *((UInt16*)ptr.ToPointer()) = value;
	}

	public class AlignedArrayInt32 : AlignedArray<Int32>
	{
		public AlignedArrayInt32(byte[] buffer, int alignment, params int[] lengths)
			: base(buffer, alignment, lengths) { }

		public AlignedArrayInt32(int alignment, params int[] lengths)
			: base(alignment, lengths) { }

		protected unsafe override Int32 GetCore(IntPtr ptr) => *((Int32*)ptr.ToPointer());
		protected unsafe override void SetCore(Int32 value, IntPtr ptr) => *((Int32*)ptr.ToPointer()) = value;
	}

	public class AlignedArrayUInt32 : AlignedArray<UInt32>
	{
		public AlignedArrayUInt32(byte[] buffer, int alignment, params int[] lengths)
			: base(buffer, alignment, lengths) { }

		public AlignedArrayUInt32(int alignment, params int[] lengths)
			: base(alignment, lengths) { }

		protected unsafe override UInt32 GetCore(IntPtr ptr) => *((UInt32*)ptr.ToPointer());
		protected unsafe override void SetCore(UInt32 value, IntPtr ptr) => *((UInt32*)ptr.ToPointer()) = value;
	}

	public class AlignedArrayInt64 : AlignedArray<Int64>
	{
		public AlignedArrayInt64(byte[] buffer, int alignment, params int[] lengths)
			: base(buffer, alignment, lengths) { }

		public AlignedArrayInt64(int alignment, params int[] lengths)
			: base(alignment, lengths) { }

		protected unsafe override Int64 GetCore(IntPtr ptr) => *((Int64*)ptr.ToPointer());
		protected unsafe override void SetCore(Int64 value, IntPtr ptr) => *((Int64*)ptr.ToPointer()) = value;
	}

	public class AlignedArrayUInt64 : AlignedArray<UInt64>
	{
		public AlignedArrayUInt64(byte[] buffer, int alignment, params int[] lengths)
			: base(buffer, alignment, lengths) { }

		public AlignedArrayUInt64(int alignment, params int[] lengths)
			: base(alignment, lengths) { }

		protected unsafe override UInt64 GetCore(IntPtr ptr) => *((UInt64*)ptr.ToPointer());
		protected unsafe override void SetCore(UInt64 value, IntPtr ptr) => *((UInt64*)ptr.ToPointer()) = value;
	}

	public class AlignedArraySingle : AlignedArray<Single>
	{
		public AlignedArraySingle(byte[] buffer, int alignment, params int[] lengths)
			: base(buffer, alignment, lengths) { }

		public AlignedArraySingle(int alignment, params int[] lengths)
			: base(alignment, lengths) { }

		protected unsafe override Single GetCore(IntPtr ptr) => *((Single*)ptr.ToPointer());
		protected unsafe override void SetCore(Single value, IntPtr ptr) => *((Single*)ptr.ToPointer()) = value;
	}

	public class AlignedArrayDouble : AlignedArray<Double>
	{
		public AlignedArrayDouble(byte[] buffer, int alignment, params int[] lengths)
			: base(buffer, alignment, lengths) { }

		public AlignedArrayDouble(int alignment, params int[] lengths)
			: base(alignment, lengths) { }

		protected unsafe override Double GetCore(IntPtr ptr) => *((Double*)ptr.ToPointer());
		protected unsafe override void SetCore(Double value, IntPtr ptr) => *((Double*)ptr.ToPointer()) = value;
	}

	public class AlignedArrayComplex : AlignedArray<Complex>
	{
		public AlignedArrayComplex(byte[] buffer, int alignment, params int[] lengths)
			: base(buffer, alignment, lengths) { }

		public AlignedArrayComplex(int alignment, params int[] lengths)
			: base(alignment, lengths) { }

		protected unsafe override Complex GetCore(IntPtr ptr) => *((Complex*)ptr.ToPointer());
		protected unsafe override void SetCore(Complex value, IntPtr ptr) => *((Complex*)ptr.ToPointer()) = value;
	}

}