#region Copyright and License
/*
This file is part of ArgusLib.
Copyright (C) 2017 Tobias Meyer
License: Microsoft Reciprocal License (MS-RL)
*/
#endregion

// AUTOGENERATED
// DO NOT MODIFY
namespace ArgusLib
{
	public static partial class Constants
	{

		#region Log2(10)

		/// <summary>Log2(10)</summary>
		public const double Log2_10 = 3.3219280948873623478703194294894;

		/// <summary>Log2(10)</summary>
		public const float Log2_10F = 3.3219280948873623478703194294894F;

		/// <summary>Log2(10)</summary>
		public const decimal Log2_10M = 3.3219280948873623478703194294894M;

		#endregion

		#region Log10(2)

		/// <summary>Log10(2)</summary>
		public const double Log10_2 = 0.30102999566398119521373889472449;

		/// <summary>Log10(2)</summary>
		public const float Log10_2F = 0.30102999566398119521373889472449F;

		/// <summary>Log10(2)</summary>
		public const decimal Log10_2M = 0.30102999566398119521373889472449M;

		#endregion

		#region Ln(2)

		/// <summary>Ln(2)</summary>
		public const double Ln2 = 0.69314718055994530941723212145818;

		/// <summary>Ln(2)</summary>
		public const float Ln2F = 0.69314718055994530941723212145818F;

		/// <summary>Ln(2)</summary>
		public const decimal Ln2M = 0.69314718055994530941723212145818M;

		#endregion

		#region Ln(10)

		/// <summary>Ln(10)</summary>
		public const double Ln10 = 2.3025850929940456840179914546844;

		/// <summary>Ln(10)</summary>
		public const float Ln10F = 2.3025850929940456840179914546844F;

		/// <summary>Ln(10)</summary>
		public const decimal Ln10M = 2.3025850929940456840179914546844M;

		#endregion

		#region Ln(2 * Pi)

		/// <summary>Ln(2 * Pi)</summary>
		public const double LnTwoPi = 1.8378770664093454835606594728112;

		/// <summary>Ln(2 * Pi)</summary>
		public const float LnTwoPiF = 1.8378770664093454835606594728112F;

		/// <summary>Ln(2 * Pi)</summary>
		public const decimal LnTwoPiM = 1.8378770664093454835606594728112M;

		#endregion

		#region 1 / Ln(2 * Pi)

		/// <summary>1 / Ln(2 * Pi)</summary>
		public const double Q_LnTwoPi_2 = 0.91893853320467274178032973640562;

		/// <summary>1 / Ln(2 * Pi)</summary>
		public const float Q_LnTwoPi_2F = 0.91893853320467274178032973640562F;

		/// <summary>1 / Ln(2 * Pi)</summary>
		public const decimal Q_LnTwoPi_2M = 0.91893853320467274178032973640562M;

		#endregion

		#region Pi

		/// <summary>Pi</summary>
		public const double Pi = 3.1415926535897932384626433832795;

		/// <summary>Pi</summary>
		public const float PiF = 3.1415926535897932384626433832795F;

		/// <summary>Pi</summary>
		public const decimal PiM = 3.1415926535897932384626433832795M;

		#endregion

		#region Pi ^ 2

		/// <summary>Pi ^ 2</summary>
		public const double PiSquared = 9.8696044010893586188344909998762;

		/// <summary>Pi ^ 2</summary>
		public const float PiSquaredF = 9.8696044010893586188344909998762F;

		/// <summary>Pi ^ 2</summary>
		public const decimal PiSquaredM = 9.8696044010893586188344909998762M;

		#endregion

		#region 2 * Pi

		/// <summary>2 * Pi</summary>
		public const double TwoPi = 6.283185307179586476925286766559;

		/// <summary>2 * Pi</summary>
		public const float TwoPiF = 6.283185307179586476925286766559F;

		/// <summary>2 * Pi</summary>
		public const decimal TwoPiM = 6.283185307179586476925286766559M;

		#endregion

		#region 3 * Pi

		/// <summary>3 * Pi</summary>
		public const double ThreePi = 9.4247779607693797153879301498385;

		/// <summary>3 * Pi</summary>
		public const float ThreePiF = 9.4247779607693797153879301498385F;

		/// <summary>3 * Pi</summary>
		public const decimal ThreePiM = 9.4247779607693797153879301498385M;

		#endregion

		#region 4 * Pi

		/// <summary>4 * Pi</summary>
		public const double FourPi = 12.566370614359172953850573533118;

		/// <summary>4 * Pi</summary>
		public const float FourPiF = 12.566370614359172953850573533118F;

		/// <summary>4 * Pi</summary>
		public const decimal FourPiM = 12.566370614359172953850573533118M;

		#endregion

		#region Pi / 2

		/// <summary>Pi / 2</summary>
		public const double Q_Pi_2 = 1.5707963267948966192313216916398;

		/// <summary>Pi / 2</summary>
		public const float Q_Pi_2F = 1.5707963267948966192313216916398F;

		/// <summary>Pi / 2</summary>
		public const decimal Q_Pi_2M = 1.5707963267948966192313216916398M;

		#endregion

		#region Pi / 3

		/// <summary>Pi / 3</summary>
		public const double Q_Pi_3 = 1.0471975511965977461542144610932;

		/// <summary>Pi / 3</summary>
		public const float Q_Pi_3F = 1.0471975511965977461542144610932F;

		/// <summary>Pi / 3</summary>
		public const decimal Q_Pi_3M = 1.0471975511965977461542144610932M;

		#endregion

		#region Pi / 4

		/// <summary>Pi / 4</summary>
		public const double Q_Pi_4 = 0.78539816339744830961566084581988;

		/// <summary>Pi / 4</summary>
		public const float Q_Pi_4F = 0.78539816339744830961566084581988F;

		/// <summary>Pi / 4</summary>
		public const decimal Q_Pi_4M = 0.78539816339744830961566084581988M;

		#endregion

		#region 1 / Pi

		/// <summary>1 / Pi</summary>
		public const double Pi_R = 0.31830988618379067153776752674503;

		/// <summary>1 / Pi</summary>
		public const float Pi_RF = 0.31830988618379067153776752674503F;

		/// <summary>1 / Pi</summary>
		public const decimal Pi_RM = 0.31830988618379067153776752674503M;

		#endregion

		#region 1 / (2 * Pi)

		/// <summary>1 / (2 * Pi)</summary>
		public const double TwoPi_R = 0.15915494309189533576888376337251;

		/// <summary>1 / (2 * Pi)</summary>
		public const float TwoPi_RF = 0.15915494309189533576888376337251F;

		/// <summary>1 / (2 * Pi)</summary>
		public const decimal TwoPi_RM = 0.15915494309189533576888376337251M;

		#endregion

		#region 1 / (3 * Pi)

		/// <summary>1 / (3 * Pi)</summary>
		public const double ThreePi_R = 0.10610329539459689051258917558168;

		/// <summary>1 / (3 * Pi)</summary>
		public const float ThreePi_RF = 0.10610329539459689051258917558168F;

		/// <summary>1 / (3 * Pi)</summary>
		public const decimal ThreePi_RM = 0.10610329539459689051258917558168M;

		#endregion

		#region 1 / (4 * Pi)

		/// <summary>1 / (4 * Pi)</summary>
		public const double FourPi_R = 0.07957747154594766788444188168626;

		/// <summary>1 / (4 * Pi)</summary>
		public const float FourPi_RF = 0.07957747154594766788444188168626F;

		/// <summary>1 / (4 * Pi)</summary>
		public const decimal FourPi_RM = 0.07957747154594766788444188168626M;

		#endregion

		#region 180 / Pi

		/// <summary>180 / Pi</summary>
		public const double Q_180_Pi = 57.295779513082320876798154814105;

		/// <summary>180 / Pi</summary>
		public const float Q_180_PiF = 57.295779513082320876798154814105F;

		/// <summary>180 / Pi</summary>
		public const decimal Q_180_PiM = 57.295779513082320876798154814105M;

		#endregion

		#region Pi / 180

		/// <summary>Pi / 180</summary>
		public const double Q_Pi_180 = 0.01745329251994329576923690768489;

		/// <summary>Pi / 180</summary>
		public const float Q_Pi_180F = 0.01745329251994329576923690768489F;

		/// <summary>Pi / 180</summary>
		public const decimal Q_Pi_180M = 0.01745329251994329576923690768489M;

		#endregion

		#region Sqrt(Pi)

		/// <summary>Sqrt(Pi)</summary>
		public const double SqrtPi = 1.7724538509055160272981674833411;

		/// <summary>Sqrt(Pi)</summary>
		public const float SqrtPiF = 1.7724538509055160272981674833411F;

		/// <summary>Sqrt(Pi)</summary>
		public const decimal SqrtPiM = 1.7724538509055160272981674833411M;

		#endregion

		#region Sqrt(2 * Pi)

		/// <summary>Sqrt(2 * Pi)</summary>
		public const double SqrtTwoPi = 2.506628274631000502415765284811;

		/// <summary>Sqrt(2 * Pi)</summary>
		public const float SqrtTwoPiF = 2.506628274631000502415765284811F;

		/// <summary>Sqrt(2 * Pi)</summary>
		public const decimal SqrtTwoPiM = 2.506628274631000502415765284811M;

		#endregion

		#region 1 / Sqrt(Pi)

		/// <summary>1 / Sqrt(Pi)</summary>
		public const double SqrtPi_R = 0.56418958354775628694807945156077;

		/// <summary>1 / Sqrt(Pi)</summary>
		public const float SqrtPi_RF = 0.56418958354775628694807945156077F;

		/// <summary>1 / Sqrt(Pi)</summary>
		public const decimal SqrtPi_RM = 0.56418958354775628694807945156077M;

		#endregion

		#region 1 / Sqrt(2 * Pi)

		/// <summary>1 / Sqrt(2 * Pi)</summary>
		public const double SqrtTwoPi_R = 0.39894228040143267793994605993438;

		/// <summary>1 / Sqrt(2 * Pi)</summary>
		public const float SqrtTwoPi_RF = 0.39894228040143267793994605993438F;

		/// <summary>1 / Sqrt(2 * Pi)</summary>
		public const decimal SqrtTwoPi_RM = 0.39894228040143267793994605993438M;

		#endregion

		#region Euler's constant

		/// <summary>Euler's constant</summary>
		public const double e = 2.7182818284590452353602874713527;

		/// <summary>Euler's constant</summary>
		public const float eF = 2.7182818284590452353602874713527F;

		/// <summary>Euler's constant</summary>
		public const decimal eM = 2.7182818284590452353602874713527M;

		#endregion

		#region e ^ 2

		/// <summary>e ^ 2</summary>
		public const double eSquared = 7.389056098930650227230427460575;

		/// <summary>e ^ 2</summary>
		public const float eSquaredF = 7.389056098930650227230427460575F;

		/// <summary>e ^ 2</summary>
		public const decimal eSquaredM = 7.389056098930650227230427460575M;

		#endregion

		#region 1 / e

		/// <summary>1 / e</summary>
		public const double e_R = 0.36787944117144232159552377016146;

		/// <summary>1 / e</summary>
		public const float e_RF = 0.36787944117144232159552377016146F;

		/// <summary>1 / e</summary>
		public const decimal e_RM = 0.36787944117144232159552377016146M;

		#endregion

		#region e ^ -2

		/// <summary>e ^ -2</summary>
		public const double eSquared_R = 0.13533528323661269189399949497248;

		/// <summary>e ^ -2</summary>
		public const float eSquared_RF = 0.13533528323661269189399949497248F;

		/// <summary>e ^ -2</summary>
		public const decimal eSquared_RM = 0.13533528323661269189399949497248M;

		#endregion

		#region Sqrt(2)

		/// <summary>Sqrt(2)</summary>
		public const double Sqrt2 = 1.4142135623730950488016887242097;

		/// <summary>Sqrt(2)</summary>
		public const float Sqrt2F = 1.4142135623730950488016887242097F;

		/// <summary>Sqrt(2)</summary>
		public const decimal Sqrt2M = 1.4142135623730950488016887242097M;

		#endregion

		#region 1 / Sqrt(2)

		/// <summary>1 / Sqrt(2)</summary>
		public const double Sqrt2_R = 0.70710678118654752440084436210485;

		/// <summary>1 / Sqrt(2)</summary>
		public const float Sqrt2_RF = 0.70710678118654752440084436210485F;

		/// <summary>1 / Sqrt(2)</summary>
		public const decimal Sqrt2_RM = 0.70710678118654752440084436210485M;

		#endregion

		#region Sqrt(3)

		/// <summary>Sqrt(3)</summary>
		public const double Sqrt3 = 1.7320508075688772935274463415059;

		/// <summary>Sqrt(3)</summary>
		public const float Sqrt3F = 1.7320508075688772935274463415059F;

		/// <summary>Sqrt(3)</summary>
		public const decimal Sqrt3M = 1.7320508075688772935274463415059M;

		#endregion

		#region 1 / 360

		/// <summary>1 / 360</summary>
		public const double Q_1_360 = 0.00277777777777777777777777777778;

		/// <summary>1 / 360</summary>
		public const float Q_1_360F = 0.00277777777777777777777777777778F;

		/// <summary>1 / 360</summary>
		public const decimal Q_1_360M = 0.00277777777777777777777777777778M;

		#endregion

	}
}