#region Copyright and License
/*
This file is part of ArgusLib.
Copyright (C) 2017 Tobias Meyer
License: Microsoft Reciprocal License (MS-RL)
*/
#endregion

// AUTOGENERATED
// DO NOT MODIFY
namespace ArgusLib
{
	using System;
	using ArgusLib.Diagnostics.Tracing;

	public static partial class BitConverterEx
	{
		/// <summary>
		/// Writes the byte representation of <paramref name="val"/> to <paramref name="buffer"/>
		/// starting at index <paramref name="startIndex"/> and returns the number of bytes written.
		/// </summary>
		public static int GetBytes(short val, byte[] buffer, int startIndex = 0)
		{
			if (buffer == null)
				throw Tracer.ThrowError(new ArgumentNullException(nameof(buffer)), typeof(BitConverterEx));
			if (startIndex < 0 || buffer.Length < startIndex + sizeof(short))
				throw Tracer.ThrowError(new ArgumentOutOfRangeException(nameof(startIndex)), typeof(BitConverterEx));

			unsafe
			{
				byte* ptr = (byte*)&val;
				for (int i = 0; i < sizeof(short); i++)
					buffer[startIndex + i] = ptr[i];
			}
			return sizeof(short);
		}

		/// <summary>
		/// Writes the byte representation of <paramref name="val"/> to <paramref name="buffer"/>
		/// starting at index <paramref name="startIndex"/> and returns the number of bytes written.
		/// </summary>
		public static int GetBytes(ushort val, byte[] buffer, int startIndex = 0)
		{
			if (buffer == null)
				throw Tracer.ThrowError(new ArgumentNullException(nameof(buffer)), typeof(BitConverterEx));
			if (startIndex < 0 || buffer.Length < startIndex + sizeof(ushort))
				throw Tracer.ThrowError(new ArgumentOutOfRangeException(nameof(startIndex)), typeof(BitConverterEx));

			unsafe
			{
				byte* ptr = (byte*)&val;
				for (int i = 0; i < sizeof(ushort); i++)
					buffer[startIndex + i] = ptr[i];
			}
			return sizeof(ushort);
		}

		/// <summary>
		/// Writes the byte representation of <paramref name="val"/> to <paramref name="buffer"/>
		/// starting at index <paramref name="startIndex"/> and returns the number of bytes written.
		/// </summary>
		public static int GetBytes(int val, byte[] buffer, int startIndex = 0)
		{
			if (buffer == null)
				throw Tracer.ThrowError(new ArgumentNullException(nameof(buffer)), typeof(BitConverterEx));
			if (startIndex < 0 || buffer.Length < startIndex + sizeof(int))
				throw Tracer.ThrowError(new ArgumentOutOfRangeException(nameof(startIndex)), typeof(BitConverterEx));

			unsafe
			{
				byte* ptr = (byte*)&val;
				for (int i = 0; i < sizeof(int); i++)
					buffer[startIndex + i] = ptr[i];
			}
			return sizeof(int);
		}

		/// <summary>
		/// Writes the byte representation of <paramref name="val"/> to <paramref name="buffer"/>
		/// starting at index <paramref name="startIndex"/> and returns the number of bytes written.
		/// </summary>
		public static int GetBytes(uint val, byte[] buffer, int startIndex = 0)
		{
			if (buffer == null)
				throw Tracer.ThrowError(new ArgumentNullException(nameof(buffer)), typeof(BitConverterEx));
			if (startIndex < 0 || buffer.Length < startIndex + sizeof(uint))
				throw Tracer.ThrowError(new ArgumentOutOfRangeException(nameof(startIndex)), typeof(BitConverterEx));

			unsafe
			{
				byte* ptr = (byte*)&val;
				for (int i = 0; i < sizeof(uint); i++)
					buffer[startIndex + i] = ptr[i];
			}
			return sizeof(uint);
		}

		/// <summary>
		/// Writes the byte representation of <paramref name="val"/> to <paramref name="buffer"/>
		/// starting at index <paramref name="startIndex"/> and returns the number of bytes written.
		/// </summary>
		public static int GetBytes(long val, byte[] buffer, int startIndex = 0)
		{
			if (buffer == null)
				throw Tracer.ThrowError(new ArgumentNullException(nameof(buffer)), typeof(BitConverterEx));
			if (startIndex < 0 || buffer.Length < startIndex + sizeof(long))
				throw Tracer.ThrowError(new ArgumentOutOfRangeException(nameof(startIndex)), typeof(BitConverterEx));

			unsafe
			{
				byte* ptr = (byte*)&val;
				for (int i = 0; i < sizeof(long); i++)
					buffer[startIndex + i] = ptr[i];
			}
			return sizeof(long);
		}

		/// <summary>
		/// Writes the byte representation of <paramref name="val"/> to <paramref name="buffer"/>
		/// starting at index <paramref name="startIndex"/> and returns the number of bytes written.
		/// </summary>
		public static int GetBytes(ulong val, byte[] buffer, int startIndex = 0)
		{
			if (buffer == null)
				throw Tracer.ThrowError(new ArgumentNullException(nameof(buffer)), typeof(BitConverterEx));
			if (startIndex < 0 || buffer.Length < startIndex + sizeof(ulong))
				throw Tracer.ThrowError(new ArgumentOutOfRangeException(nameof(startIndex)), typeof(BitConverterEx));

			unsafe
			{
				byte* ptr = (byte*)&val;
				for (int i = 0; i < sizeof(ulong); i++)
					buffer[startIndex + i] = ptr[i];
			}
			return sizeof(ulong);
		}

		/// <summary>
		/// Writes the byte representation of <paramref name="val"/> to <paramref name="buffer"/>
		/// starting at index <paramref name="startIndex"/> and returns the number of bytes written.
		/// </summary>
		public static int GetBytes(float val, byte[] buffer, int startIndex = 0)
		{
			if (buffer == null)
				throw Tracer.ThrowError(new ArgumentNullException(nameof(buffer)), typeof(BitConverterEx));
			if (startIndex < 0 || buffer.Length < startIndex + sizeof(float))
				throw Tracer.ThrowError(new ArgumentOutOfRangeException(nameof(startIndex)), typeof(BitConverterEx));

			unsafe
			{
				byte* ptr = (byte*)&val;
				for (int i = 0; i < sizeof(float); i++)
					buffer[startIndex + i] = ptr[i];
			}
			return sizeof(float);
		}

		/// <summary>
		/// Writes the byte representation of <paramref name="val"/> to <paramref name="buffer"/>
		/// starting at index <paramref name="startIndex"/> and returns the number of bytes written.
		/// </summary>
		public static int GetBytes(double val, byte[] buffer, int startIndex = 0)
		{
			if (buffer == null)
				throw Tracer.ThrowError(new ArgumentNullException(nameof(buffer)), typeof(BitConverterEx));
			if (startIndex < 0 || buffer.Length < startIndex + sizeof(double))
				throw Tracer.ThrowError(new ArgumentOutOfRangeException(nameof(startIndex)), typeof(BitConverterEx));

			unsafe
			{
				byte* ptr = (byte*)&val;
				for (int i = 0; i < sizeof(double); i++)
					buffer[startIndex + i] = ptr[i];
			}
			return sizeof(double);
		}

		/// <summary>
		/// Writes the byte representation of <paramref name="val"/> to <paramref name="buffer"/>
		/// starting at index <paramref name="startIndex"/> and returns the number of bytes written.
		/// </summary>
		public static int GetBytes(decimal val, byte[] buffer, int startIndex = 0)
		{
			if (buffer == null)
				throw Tracer.ThrowError(new ArgumentNullException(nameof(buffer)), typeof(BitConverterEx));
			if (startIndex < 0 || buffer.Length < startIndex + sizeof(decimal))
				throw Tracer.ThrowError(new ArgumentOutOfRangeException(nameof(startIndex)), typeof(BitConverterEx));

			unsafe
			{
				byte* ptr = (byte*)&val;
				for (int i = 0; i < sizeof(decimal); i++)
					buffer[startIndex + i] = ptr[i];
			}
			return sizeof(decimal);
		}

	}
}